# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from chariott.runtime.v1 import runtime_pb2 as chariott_dot_runtime_dot_v1_dot_runtime__pb2


class ChariottServiceStub(object):
    """*
    The service entry point to Chariott. All functionality is provided through
    this service.

    **Announce** a service to Chariott.

    The Announce method is used to announce a service to Chariott.
    If an application calls this method with a not already registered service
    it will get back that the service is in `ANNOUNCED` state. If the service
    is already registered it will return `NOT_CHANGED`. Each service needs to
    periodically call within 5 seconds this method in order to keep the service
    active with Chariott.
    More details in the [ADR-0012](docs/adr/ctp-2/0012-intent-registration.md)

    **Register** a service to Chariott.

    The Register method is used to register a service to Chariott,
    together with the locality where the service is supposed to run. It also
    takes a list of intents that the service can handle. It prunes all old
    registrations for the same service, where a service is identified by the
    same name and version. It is allowed to run two services with the same name
    and a different version at the same time.

    **Fulfill** an intent.

    The Fulfill method is used to fulfill an intent. Chariott will
    lookup the registered services that can handle the intent. This is
    opaque to the caller. It will call the Fulfill method on the selected
    service that is Chariott selected to be able to handle the intent.
    More details on intents can be found in the following ADRs:
    [ADR-0014](docs/adr/ctp-2/0014-intent-discover.md)
    [ADR-0015](docs/adr/ctp-2/0015-inspection.md)
    [ADR-0017](docs/adr/ctp-2/0016-intent-invoke.md)
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Announce = channel.unary_unary(
                '/chariott.runtime.v1.ChariottService/Announce',
                request_serializer=chariott_dot_runtime_dot_v1_dot_runtime__pb2.AnnounceRequest.SerializeToString,
                response_deserializer=chariott_dot_runtime_dot_v1_dot_runtime__pb2.AnnounceResponse.FromString,
                )
        self.Register = channel.unary_unary(
                '/chariott.runtime.v1.ChariottService/Register',
                request_serializer=chariott_dot_runtime_dot_v1_dot_runtime__pb2.RegisterRequest.SerializeToString,
                response_deserializer=chariott_dot_runtime_dot_v1_dot_runtime__pb2.RegisterResponse.FromString,
                )
        self.Fulfill = channel.unary_unary(
                '/chariott.runtime.v1.ChariottService/Fulfill',
                request_serializer=chariott_dot_runtime_dot_v1_dot_runtime__pb2.FulfillRequest.SerializeToString,
                response_deserializer=chariott_dot_runtime_dot_v1_dot_runtime__pb2.FulfillResponse.FromString,
                )


class ChariottServiceServicer(object):
    """*
    The service entry point to Chariott. All functionality is provided through
    this service.

    **Announce** a service to Chariott.

    The Announce method is used to announce a service to Chariott.
    If an application calls this method with a not already registered service
    it will get back that the service is in `ANNOUNCED` state. If the service
    is already registered it will return `NOT_CHANGED`. Each service needs to
    periodically call within 5 seconds this method in order to keep the service
    active with Chariott.
    More details in the [ADR-0012](docs/adr/ctp-2/0012-intent-registration.md)

    **Register** a service to Chariott.

    The Register method is used to register a service to Chariott,
    together with the locality where the service is supposed to run. It also
    takes a list of intents that the service can handle. It prunes all old
    registrations for the same service, where a service is identified by the
    same name and version. It is allowed to run two services with the same name
    and a different version at the same time.

    **Fulfill** an intent.

    The Fulfill method is used to fulfill an intent. Chariott will
    lookup the registered services that can handle the intent. This is
    opaque to the caller. It will call the Fulfill method on the selected
    service that is Chariott selected to be able to handle the intent.
    More details on intents can be found in the following ADRs:
    [ADR-0014](docs/adr/ctp-2/0014-intent-discover.md)
    [ADR-0015](docs/adr/ctp-2/0015-inspection.md)
    [ADR-0017](docs/adr/ctp-2/0016-intent-invoke.md)
    """

    def Announce(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Fulfill(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChariottServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Announce': grpc.unary_unary_rpc_method_handler(
                    servicer.Announce,
                    request_deserializer=chariott_dot_runtime_dot_v1_dot_runtime__pb2.AnnounceRequest.FromString,
                    response_serializer=chariott_dot_runtime_dot_v1_dot_runtime__pb2.AnnounceResponse.SerializeToString,
            ),
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=chariott_dot_runtime_dot_v1_dot_runtime__pb2.RegisterRequest.FromString,
                    response_serializer=chariott_dot_runtime_dot_v1_dot_runtime__pb2.RegisterResponse.SerializeToString,
            ),
            'Fulfill': grpc.unary_unary_rpc_method_handler(
                    servicer.Fulfill,
                    request_deserializer=chariott_dot_runtime_dot_v1_dot_runtime__pb2.FulfillRequest.FromString,
                    response_serializer=chariott_dot_runtime_dot_v1_dot_runtime__pb2.FulfillResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'chariott.runtime.v1.ChariottService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ChariottService(object):
    """*
    The service entry point to Chariott. All functionality is provided through
    this service.

    **Announce** a service to Chariott.

    The Announce method is used to announce a service to Chariott.
    If an application calls this method with a not already registered service
    it will get back that the service is in `ANNOUNCED` state. If the service
    is already registered it will return `NOT_CHANGED`. Each service needs to
    periodically call within 5 seconds this method in order to keep the service
    active with Chariott.
    More details in the [ADR-0012](docs/adr/ctp-2/0012-intent-registration.md)

    **Register** a service to Chariott.

    The Register method is used to register a service to Chariott,
    together with the locality where the service is supposed to run. It also
    takes a list of intents that the service can handle. It prunes all old
    registrations for the same service, where a service is identified by the
    same name and version. It is allowed to run two services with the same name
    and a different version at the same time.

    **Fulfill** an intent.

    The Fulfill method is used to fulfill an intent. Chariott will
    lookup the registered services that can handle the intent. This is
    opaque to the caller. It will call the Fulfill method on the selected
    service that is Chariott selected to be able to handle the intent.
    More details on intents can be found in the following ADRs:
    [ADR-0014](docs/adr/ctp-2/0014-intent-discover.md)
    [ADR-0015](docs/adr/ctp-2/0015-inspection.md)
    [ADR-0017](docs/adr/ctp-2/0016-intent-invoke.md)
    """

    @staticmethod
    def Announce(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chariott.runtime.v1.ChariottService/Announce',
            chariott_dot_runtime_dot_v1_dot_runtime__pb2.AnnounceRequest.SerializeToString,
            chariott_dot_runtime_dot_v1_dot_runtime__pb2.AnnounceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chariott.runtime.v1.ChariottService/Register',
            chariott_dot_runtime_dot_v1_dot_runtime__pb2.RegisterRequest.SerializeToString,
            chariott_dot_runtime_dot_v1_dot_runtime__pb2.RegisterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Fulfill(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chariott.runtime.v1.ChariottService/Fulfill',
            chariott_dot_runtime_dot_v1_dot_runtime__pb2.FulfillRequest.SerializeToString,
            chariott_dot_runtime_dot_v1_dot_runtime__pb2.FulfillResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
